// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {ERC721} from "./vendor/@openzeppelin/contracts/v5.0.0/token/ERC721/ERC721.sol";
import {IERC20} from "./vendor/@openzeppelin/contracts/v5.0.0/token/ERC20/IERC20.sol";

contract VulnerableNFT is ERC721 {
    uint256 private _nextTokenId;
    address internal immutable s_usdt;
    uint256 internal immutable s_priceInUsdt;

    constructor(address usdt, uint256 priceInUsdt) ERC721("MyToken", "MTK") {
        s_usdt = usdt;
        s_priceInUsdt = priceInUsdt;
    }

    function purchaseNft(address to) public {
        // WARNING: Unchecked return value
        // This should fail due to USDT not being an ERC20 token actually
        IERC20(s_usdt).transferFrom(msg.sender, address(this), s_priceInUsdt);

        uint256 tokenId = _nextTokenId++;
        _safeMint(to, tokenId);
    }
}
