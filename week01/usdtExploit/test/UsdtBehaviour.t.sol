// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console2} from "forge-std/Test.sol";
import {IERC20} from "../src/vendor/@openzeppelin/contracts/v5.0.0/token/ERC20/IERC20.sol";
import {SafeERC20} from "./../src/vendor/@openzeppelin/contracts/v5.0.0/token/ERC20/utils/SafeERC20.sol";
import {VulnerableNFT} from "../src/VulnerableNFT.sol";

contract UsdtBehaviourTest is Test {
    using SafeERC20 for IERC20;

    uint256 ethereumMainnetFork;
    uint256 blockNumber = 19262114;
    address usdtContractAddress = 0xdAC17F958D2ee523a2206206994597C13D831ec7;

    VulnerableNFT vulnerableNft;
    uint256 priceInUsdt = 1000000; // 1 USDT
    address alice;
    address bob;

    function setUp() public {
        ethereumMainnetFork = vm.createSelectFork(vm.envString("ETHEREUM_MAINNET_RPC_URL"));
        vm.rollFork(blockNumber);

        vulnerableNft = new VulnerableNFT(usdtContractAddress, priceInUsdt);

        alice = 0xee5B5B923fFcE93A870B3104b7CA09c3db80047A;
        bob = 0xa60Ab75442b88dEb99b0F083D8D6Ea47830139D9;
    }

    function test_ValidateForkSetUp() public {
        /**
         * Block number: 19262114
         * USDT holders:
         * 0xee5B5B923fFcE93A870B3104b7CA09c3db80047A = 206,139,930.422005 USDT
         * 0xa60Ab75442b88dEb99b0F083D8D6Ea47830139D9 = 0 USDT
         */
        assertEq(vm.activeFork(), ethereumMainnetFork);
        uint256 balanceAlice = IERC20(usdtContractAddress).balanceOf(alice);
        uint256 balanceBob = IERC20(usdtContractAddress).balanceOf(bob);

        assertEq(balanceAlice, 206139930422005);
        assertEq(balanceBob, 0);
    }

    function test_shouldMint() public {
        assertEq(vm.activeFork(), ethereumMainnetFork);
        assert(address(vulnerableNft).code.length > 0);
        assert(usdtContractAddress.code.length > 0);

        IERC20(usdtContractAddress).safeApprove(address(vulnerableNft), priceInUsdt);

        vulnerableNft.purchaseNft(address(alice)); // This fails
    }
}
